import java.util.Arrays;
import java.*;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Stack;
public class PATH {
// the former 4 elements of mx and my represent up,down,right,left. while the latter 4 elements
of mx and my represent right-up, left-up, right-down, left-down
public final static int[] mx = { 0, -1, 0, 1, -1, -1, 1, 1 };
public final static int[] my = { -1, 0, 1, 0, 1, -1, -1, 1 };
// 1 represents obstacles and boundary
final static public int[][] map = {
{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
{ 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1 },
{ 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1 },
{ 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1 },
{ 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1 },
{ 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1 },
{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 } };
public static void main(String[] args) {
int k[]=new int[10];
int a[]=new int[10];
Point m[]=new Point[10];
int minP=0;
Point start = new Point(1, 1);
Point end[] = new Point[10];//generate 10 goal states randomly in array end
end[0]=new Point(10,13);
end[1]=new Point(5,10);
end[2]=new Point(7,3);
end[3]=new Point(4,1);
end[4]=new Point(10,11);
end[5]=new Point(1,13);
end[6]=new Point(8,12);
end[7]=new Point(13,11);
end[8]=new Point(9,4);
end[9]=new Point(6,11);
int movecounter=0;
for (int i = 0; i < 10; i++) {//get distances from the start point to each goal state.
and put thees distances into array k
k[i] = Point.getDistance(start, end[i]);
}
for (int i = 0; i < 10; i++) {// assign array k to array a
a[i]=k[i];
}
Arrays.sort(a); //resort these distances
for (int p = 0; p < 10; p++) {//I think it is not easy to understand. for example, if
k[0]==a[4], we should take k[0] to the 4th place. so when k[p]==a[j], k[p] should be in the jth
place.
for (int j = 0; j < 10; j++) {
if (k[p] == a[j]) {
m[j]=end[p];
}
}
}
for (int q = 0; q < 10; q++) {// we have 10 goal states, so q should be less than 10
Stack<Point> stack = printPath(start, m[q]);//I use a stack to store the path
if (null == stack) {
System.out.println("Not accessible !");
} else {
while (!stack.isEmpty()) {//pop out the elemnt until the stack is empty
System.out.print(stack.pop() + " -> ");// print out the concrete path
movecounter++;//mouvecounter records the number of steps
}
System.out.print(" New Round -> ");
System.out.println();
}
start = m[q];//update the start point after reaching one goal state
}
System.out.print(movecounter++);
}
public static Stack<Point> printPath(Point start, Point end) {
ArrayList<Point> open = new ArrayList<Point>();//define open table
ArrayList<Point> close = new ArrayList<Point>();//define close table
open.clear();
close.clear();//initialize open and close
Stack<Point> pathStack = new Stack<Point>();
start.parent = null;
Point currentPoint = new Point(start.x, start.y);//at the beginning, I take the start
point as the current point
//close.add(currentPoint);
boolean flag = true;
while(flag) {
for (int i = 0; i < 8; i++) {
int fx = currentPoint.x + mx[i];
int fy = currentPoint.y + my[i];
Point tempPoint = new Point(fx,fy);
if (map[fx][fy] == 1) {
// the boundary and obstacles are 1
continue;
} else {
if(end.equals(tempPoint)) {//if the temporary point equal the goal state
flag = false;
end.parent = currentPoint;
break;
}
if(i<4) {
tempPoint.G = currentPoint.G + 10;// the cost of directions up, down,
right, left is 10
}else {
tempPoint.G = currentPoint.G + 14;//the cost of directions right-up,
left-up, right-down, left-down is 14. In this case, because the type of G is int, while the square
root of 2 is a double data which does not represent G. So I use 14 represents the square root
of 2 and 10 represents 1
}
tempPoint.H = Point.getDistance(tempPoint,end);//Manhattan distance
tempPoint.F = tempPoint.G + tempPoint.H;//f(n)=g(n)+h(n)
if(open.contains(tempPoint)) {//whether tempPoint exists in open table
int pos = open.indexOf(tempPoint );
Point temp = open.get(pos);
if(temp.F > tempPoint.F) {
// if (tempPoint exists in open table) {
// if (the cost of tempPoint is smaller than that of open table)
// update the cost of open table；
// }
open.remove(pos);
open.add(tempPoint);
tempPoint.parent = currentPoint;
}
}else if(close.contains(tempPoint)){
// else {//Y exists in close table
// if (the cost of tempPoint is smaller than that of close table)
{
// update the cost of close table；
//remove the relevant point from close table, and add tempPoint into open
table
//
// }
// }
//
int pos = close.indexOf(tempPoint );
Point temp = close.get(pos);
if(temp.F > tempPoint.F) {
close.remove(pos);
open.add(tempPoint);
tempPoint.parent = currentPoint;
}
}else {
open.add(tempPoint);
tempPoint.parent = currentPoint;
}
}
}//end for
if(open.isEmpty()) {
return null;
}//no path
if(false==flag) {
break;
}//find a path
open.remove(currentPoint);
close.add(currentPoint);
Collections.sort(open);
currentPoint = open.get(0);
}//end while
Point node = end;
while(node.parent!=null) {
pathStack.push(node);
node = node.parent;
}
return pathStack;
}
}

****************************分割线*************************************************************

class Point implements Comparable<Point>{
public int x;
public int y;
public Point parent;
public int F, G, H;
public Point(int x, int y) {
super();
this.x = x;
this.y = y;
this.F = 0;
this.G = 0;
this.H = 0;
}
public int compareTo(Point o) {
// TODO Auto-generated method stub
return this.F - o.F;
}
public boolean equals(Object obj) {//compare point x and point y, whether x equals y
Point point = (Point) obj;
if (point.x == this.x && point.y == this.y)
return true;
else {
return false;
}
}
public static int getDistance(Point p1, Point p2) {//Manhattan distance of 2 points
int dis = Math.abs(p1.x - p2.x) * 10 + Math.abs(p1.y - p2.y) * 10;
return dis;
}
public String toString() {
return "(" + this.x + "," + this.y + ")";
}
}
